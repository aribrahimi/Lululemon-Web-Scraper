AWSTemplateFormatVersion: '2010-09-09'
Description: An AWS CloudFormation template for a serverless web scraper API.

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: YourLambdaDeploymentBucket
        S3Key: path/to/your/lambda/deployment/package.zip
      Runtime: python3.8
      Timeout: 30

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        # Include the content of your api-gateway.yml file here.
        # You can use the Fn::Transform intrinsic function if your API definition is stored in an S3 bucket
        Fn::Transform:
          Name: 'AWS::Include'
          Parameters:
            Location: s3://YourBucketName/path/to/api-gateway.yml
      FailOnWarnings: true

Outputs:
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: !GetAtt LambdaFunction.Arn

  ApiGatewayRestApiId:
    Description: The ID of the API Gateway
    Value: !Ref ApiGatewayRestApi

  ApiGatewayRestApiRootResourceId:
    Description: The root resource ID of the API Gateway
    Value: !GetAtt ApiGatewayRestApi.RootResourceId
